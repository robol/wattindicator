#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys, os
from gi.repository import GObject, Gtk, AppIndicator3, GLib, UPowerGlib, Gio

class StartupLoader ():
    """Simple class that manages the configuration for wattindicator
    startup. """

    WATTINDICATOR_DESKTOP_FILE = "wattindicator.desktop"

    WATTINDICATOR_DESKTOP_CONTENT = """[Desktop Entry]
Type=Application
Exec=%s
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
Name=Watt Indicator
Comment=Watt Indicator Applet
""" % os.path.abspath (sys.argv[0])

    def _get_autostart_dir (self):
        xdg_config_home = os.getenv ("XDG_CONFIG_HOME")
        if xdg_config_home is None:
            xdg_config_home = os.path.expanduser ("~/.config")

        return os.path.join (xdg_config_home, "autostart")

    def _get_desktop_file_path (self):
        return os.path.join (self._get_autostart_dir (), 
                             self.WATTINDICATOR_DESKTOP_FILE)

    def is_enabled (self):
        """Return true if wattindicator is configured to start on session
        startup. """
        return os.path.exists (self._get_desktop_file_path ())

    def enable (self):
        if not self.is_enabled ():
            with open (self._get_desktop_file_path (), "w") as h:
                h.write (self.WATTINDICATOR_DESKTOP_CONTENT)
    
    def disable (self):
        if self.is_enabled ():
            os.remove (self._get_desktop_file_path ())
            

class WattIndicator ():

    def __init__(self):
        # Set up DBUS
        self.bus = Gio.bus_get_sync (Gio.BusType.SYSTEM, None)

        # Find the battery path
        proxy = Gio.DBusProxy.new_sync (self.bus, Gio.DBusProxyFlags.NONE, None,
                                        "org.freedesktop.UPower", 
                                        "/org/freedesktop/UPower",
                                        "org.freedesktop.UPower", None)
        paths = proxy.EnumerateDevices ()
        self.battery_path = None
        for path in paths:
            if "battery" in path:
                self.battery_path = path
                break

        self.bus.signal_subscribe (None, 'org.freedesktop.UPower.Device', 
                                   None, None, None, 0, 
                                   lambda *args, **kwargs : self.update_watt (), None)

        # Load the StartupLoader that will manage the desktop file in ~/.config/autostart
        self.startup_loader = StartupLoader()

        self.indicator = AppIndicator3.Indicator.new ("wattindicator", "indicator-messages-new",
                                                      AppIndicator3.IndicatorCategory.HARDWARE)
        self.menu = Gtk.Menu ()

        self.start_on_session = Gtk.CheckMenuItem.new_with_label ("Start on boot")
        self.start_on_session.connect ("toggled", self.on_start_on_session_toggled)
        self.start_on_session.set_active (self.startup_loader.is_enabled ())
        self.menu.append (self.start_on_session)

        self.watt_item = Gtk.MenuItem.new_with_label ("Quit")
        self.watt_item.connect ("activate", Gtk.main_quit)
        self.menu.append (self.watt_item)

        self.client = UPowerGlib.Client.new ()

        self.menu.show_all ()

        if not self.client.get_on_battery ():
            self.indicator.set_status (AppIndicator3.IndicatorStatus.PASSIVE)
        else:
            self.indicator.set_status (AppIndicator3.IndicatorStatus.ACTIVE)

        self.indicator.set_menu (self.menu)
        self.indicator.set_icon_theme_path (self.get_icon_theme_path())
        self.indicator.set_icon_full("lightning", "Lightning")

        self.update_watt ()

    def get_icon_theme_path(self):
        """Retrieve the correct path for the icons"""
        basedir = os.path.abspath (os.path.dirname (sys.argv[0]))

        if basedir in ("/usr/bin", "/usr/local/bin"):
            return os.path.join (basedir, "..", "share", "wattindicator")
        else:
            return basedir

    def on_start_on_session_toggled (self, menu_item = None):
        if self.start_on_session.get_active():
            self.startup_loader.enable()
        else:
            self.startup_loader.disable()
        
    def update_watt (self):
        if not self.client.get_on_battery ():
            self.indicator.set_status (AppIndicator3.IndicatorStatus.PASSIVE)
            return
        else:
            self.indicator.set_status (AppIndicator3.IndicatorStatus.ACTIVE)

        if self.battery_path is None:
            self.indicator.set_label ("No battery found", "")
            return

        self.proxy = Gio.DBusProxy.new_sync(self.bus, Gio.DBusProxyFlags.NONE, None, 
                                            'org.freedesktop.UPower', 
                                            self.battery_path,
                                            'org.freedesktop.UPower.Device', 
                                            None)

        rate = self.proxy.get_cached_property ("EnergyRate").get_double ()

        if (self.client.get_on_battery ()):
            self.menu.show_all ()
            # self.indicator.set_icon ("battery_plugged")
        else:
            self.menu.hide ()
            # self.indicator.set_icon ("battery-060-charging")

        self.indicator.set_label ("%.2f W" % rate, "")
        return True

if __name__ == "__main__":

    import argparse

    parser = argparse.ArgumentParser (description = 'Simple power monitor')
    parser.add_argument ('-v', '--version', help = 'Display the program version and exists', 
                         action = "store_true")

    args = parser.parse_args ()

    if args.version: 
        print ("wattindicator 1.2")
        sys.exit (0)
    else:
        wi = WattIndicator ()
        Gtk.main ()
